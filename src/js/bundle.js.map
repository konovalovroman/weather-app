{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAe;;AAEf;;AAEA;AACA;;AAEA;AACA,+CAA+C,IAAI,YAAY,WAAW;AAC1E;;AAEA;AACA;;AAEA;AACA,iGAAiG,SAAS,SAAS,aAAa;AAChI;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;UCjCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;ACN+C;;AAE/C;;AAEA,oBAAoB,4DAAU;AAC9B;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;;;AAIA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,mBAAmB;AACjF;AACA,uCAAuC,uBAAuB;AAC9D,wCAAwC,wBAAwB;AAChE,qCAAqC,oBAAoB;AACzD;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;;;;AAOA,CAAC,E","sources":["webpack:///./src/js/modules/weather-api.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/js/script.js"],"sourcesContent":["export default class WeatherAPI {\n\n    _apiKey = 'cd8a7d99a022a62768e0c560e03df096';\n\n    getRecourses = async (url) => {\n        let res = await fetch(url);\n\n        if (!res.ok) {\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\n        }\n\n        return await res.json();\n    }\n\n    getWeatherInCurrentCity = async (cityName) => {\n        const res = await this.getRecourses(`http://api.openweathermap.org/data/2.5/forecast?q=${cityName}&appid=${this._apiKey}&lang=ru`);\n        return this.transformWeatherObject(res);\n    } \n\n    transformWeatherObject = (res) => {\n        return {\n            cityName: res.city.name,\n            country: res.city.country,\n            temperature: this.kelvinToCelsius(res.list[0].main.temp),\n            pressure: res.list[0].main.pressure,\n            weather: res.list[0].weather[0].main,\n            description: res.list[0].weather[0].description\n        }\n    }\n\n    kelvinToCelsius = (kelvin) => {\n        return Math.floor(kelvin - 273);\n    }\n}","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import WeatherAPI from './modules/weather-api';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n\n    const api = new WeatherAPI();\n    const storage = window.localStorage;\n    const weatherList = loadList();\n\n    storage.setItem('weatherList', weatherList);\n    console.log(storage.getItem('weatherList').split(','));\n\n\n    function loadList() {\n        if (storage.getItem('weatherList')) {\n            return storage.getItem('weatherList').split(',');\n        } else {\n            return [];\n        }\n    }\n\n    function addToList(weatherObj) {\n        console.log(weatherObj); \n        weatherList.push(weatherObj.cityName);\n        saveList();\n        printList(weatherList);\n    }\n\n    function saveList() {\n        storage.setItem('weatherList', weatherList);\n    }\n\n    function onSearch() {\n        document.querySelector('.search-btn').addEventListener('click', () => {\n            const result = document.querySelector('.input-form').value;\n            if (result) {\n                document.querySelector('.input-form').value = '';\n                api.getWeatherInCurrentCity(result).then(addToList);\n            }\n        });\n    }\n\n\n\n    function printList(weatherList) {\n        removeElements();\n        weatherList.forEach((item) => {\n            api.getWeatherInCurrentCity(item).then(makeList);\n        });\n    }\n\n    function makeList(weatherObj) {\n        document.querySelector('.weather-list').appendChild(getListItemElement(weatherObj));\n    }\n\n    function getListItemElement(weatherObj) {\n        const elem = document.createElement('div');\n        elem.classList.add('weather-list-item');\n        elem.innerHTML = `    \n            <div class=\"buttons\">\n                <div class=\"info-btn\"></div>\n                <div class=\"close-btn\"></div>\n            </div>\n            <div class=\"weather-icon\">\n                <img src=\"../resources/images/weather-icons/${weatherObj.weather}.png\" width=\"80\" height=\"80\" alt=\"\">\n            </div>\n            <div class=\"description\">${weatherObj.description}</div>\n            <div class=\"temperature\"> ${weatherObj.temperature} â„ƒ</div>\n            <div class=\"city-name\">${weatherObj.cityName}</div>\n        `;\n\n        return elem;\n    }\n\n    function removeElements() {\n        document.querySelectorAll('.weather-list-item').forEach(item => item.remove());\n    }\n\n\n    //loadList(weatherList);\n    console.log(weatherList);\n    printList(weatherList);\n    onSearch();\n\n\n\n\n\n\n});"],"names":[],"sourceRoot":""}